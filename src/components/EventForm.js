import { transformTaskToEvent } from '../scripts/calendar.js';
import { askAiReport } from '../services/aiClient.js';
import { createTask, deleteTask, getProjects, updateTask } from '../services/taskService.js';
import { getUsers } from '../services/userService.js';
import { createModal } from './Modal.js';
import { showAiReportModal } from './showAiReportModal.js';

export function showEventForm(date, eventData, options = {}) {
  const colorMap = options.colorMap || {}; // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É —Ü–≤–µ—Ç–æ–≤
  const isEditMode = !!eventData;

  // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ eventData?.extendedProps –≤–º–µ—Å—Ç–æ eventData?.extendedProps
  console.log('üîç eventData?.extendedProps:', eventData?.extendedProps);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ "–í–µ—Å—å –¥–µ–Ω—å"
  const allDay = options.allDay === true || eventData?.extendedProps?.allDay === true;

  const settings = window.calendarSettings || { slotMinTime: '08:00', slotMaxTime: '18:00' };

  let startDate,
    formattedDate,
    formattedFinishDate,
    formattedStartTime,
    formattedEndTime,
    formattedStartDateTime,
    formattedFinishDateTime;

  if (isEditMode) {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    startDate = new Date(eventData?.extendedProps?.originalStart);
    const endDate = eventData?.extendedProps.originalEnd
      ? new Date(eventData?.extendedProps.originalEnd)
      : new Date(startDate.getTime() + 30 * 60 * 1000);

    formattedStartDateTime = startDate.toISOString().slice(0, 16); // –§–æ—Ä–º–∞—Ç YYYY-MM-DDTHH:MM
    formattedFinishDateTime = endDate.toISOString().slice(0, 16);
  } else {
    // –°–æ–∑–¥–∞–Ω–∏–µ
    startDate = new Date(date);
    const endDate = new Date(startDate.getTime() + 30 * 60 * 1000);

    formattedStartDateTime = startDate.toISOString().slice(0, 16); // –§–æ—Ä–º–∞—Ç YYYY-MM-DDTHH:MM
    formattedFinishDateTime = endDate.toISOString().slice(0, 16);

    if (allDay) {
      formattedStartTime = settings.slotMinTime; // –∏–ª–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ getUserCalendarStart()
      formattedEndTime = settings.slotMaxTime;
    }
  }

  const titleValue = eventData?.title || '';
  const deadlineValue = eventData?.extendedProps?.deadline
    ? eventData?.extendedProps.deadline.split('T')[0]
    : '';

  const commentValue = eventData?.extendedProps?.comment || '';
  const groupIdValue =
    isEditMode && eventData?.extendedProps?.groupId ? eventData?.extendedProps.groupId : '';

  const timeEstimateValue =
    isEditMode && eventData?.extendedProps?.timeEstimate
      ? (eventData?.extendedProps.timeEstimate / 3600).toFixed(2)
      : '';

  const actualStartDate = eventData?.extendedProps?.dateStart
    ? new Date(eventData?.extendedProps.dateStart).toISOString().split('T')[0]
    : '‚Äî';

  const actualFinishDate = eventData?.extendedProps?.closedDate
    ? new Date(eventData?.extendedProps.closedDate).toISOString().split('T')[0]
    : '‚Äî';

  const isNew = !isEditMode;
  const submitButtonText = isNew ? '–°–æ–∑–¥–∞—Ç—å' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
  const modalTitle = isNew ? '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É';
  const deleteButtonHTML = !isNew
    ? `<button type="button" id="delete-event" class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-700">–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É</button>`
    : '';

  const globalSelect = document.querySelector('#user-select');
  const userFilterValue = globalSelect?.value;
  let executorSelectHTML = '';
  if (userFilterValue === 'all') {
    executorSelectHTML = `
      <label class="block text-sm font-medium text-gray-700">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</label>
      <div id="executor-container" class="custom-executor-wrapper mb-4"></div>
    `;
  }

  // –ï—Å–ª–∏ allDay = true -> –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç readonly –≤ –ø–æ–ª—è—Ö
  const readonlyAttr = allDay ? 'readonly' : '';

  const allowTimeTrackingValue = isEditMode && eventData?.extendedProps?.allowTimeTracking === 'Y';
  const actualTimeSpentValue =
    isEditMode && eventData?.extendedProps?.durationFact
      ? (eventData.extendedProps.durationFact / 3600).toFixed(2)
      : '0.00';
  // –ë–ª–æ–∫ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞—Ç–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  const actualTimeBlock = isEditMode
    ? `
  <div class="grid grid-cols-2 gap-4 bg-gray-100 p-2 rounded-md mb-4">
    <div>
      <label class="block text-sm font-medium text-gray-700">–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∞–ª–æ</label>
      <input type="text" class="border rounded w-full p-2 bg-gray-200" value="${actualStartDate}" readonly>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ</label>
      <input type="text" class="border rounded w-full p-2 bg-gray-200" value="${actualFinishDate}" readonly>
    </div>
    <div class="col-span-2">
      <label class="block text-sm font-medium text-gray-700">–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—á–∞—Å—ã)</label>
      <input type="text" class="border rounded w-full p-2 bg-gray-200" value="${actualTimeSpentValue}" readonly>
    </div>
  </div>
  `
    : '';

  const taskLinkBlock =
    isEditMode && eventData?.extendedProps?.bitrix24Id
      ? `
    <div>
      <label class="block text-sm font-medium text-gray-700">–ó–∞–¥–∞—á–∞ –≤ Bitrix24</label>
      <div
        id="task-title-link"
        data-task-id="${eventData?.extendedProps.bitrix24Id}"
        class="border rounded w-full p-2 mb-4 bg-gray-100 text-blue-600 hover:underline cursor-pointer"
      >
        –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É
      </div>
    </div>
  `
      : '';

  const timeTrackingCheckbox = `
  <div class="flex items-center mb-4">
    <input type="checkbox" id="allow-time-tracking" class="mr-2" ${
      allowTimeTrackingValue ? 'checked' : ''
    }>
    <label for="allow-time-tracking" class="text-sm font-medium text-gray-700">
      –£—á–∏—Ç—ã–≤–∞—Ç—å –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    </label>
  </div>
`;
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É
  const formContent = `
    <form id="event-form" class="w-full">
     ${taskLinkBlock}
    <label class="block text-sm font-medium text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</label>
    <input
      type="text"
      id="event-title"
      class="border rounded w-full p-2 mb-4"
      placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
      value="${titleValue}"
    >
          <!-- –ë–ª–æ–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) -->
    ${actualTimeBlock}

<div>
  <label class="block text-sm font-medium text-gray-700">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</label>
  <input type="datetime-local" id="event-start-datetime" class="border rounded w-full p-2 mb-4" value="${formattedStartDateTime}" ${readonlyAttr}>
</div>

<div>
  <label class="block text-sm font-medium text-gray-700">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</label>
  <input type="datetime-local" id="event-finish-datetime" class="border rounded w-full p-2 mb-4" value="${formattedFinishDateTime}" ${readonlyAttr}>
</div>


      ${executorSelectHTML}
      

<label class="block text-sm font-medium text-gray-700">–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫</label>
<input type="datetime-local" id="event-deadline-datetime" class="border rounded w-full p-2 mb-4" value="${deadlineValue}">


          <!-- –ù–æ–≤—ã–π –±–ª–æ–∫: –ü—Ä–æ–µ–∫—Ç -->
    <label class="block text-sm font-medium text-gray-700">–ü—Ä–æ–µ–∫—Ç (–ì—Ä—É–ø–ø–∞ Bitrix24)</label>
    <div id="project-container" class="mb-4"></div>
    
    <!-- –ù–æ–≤—ã–π –±–ª–æ–∫: –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è (—á–∞—Å—ã) -->
    <label class="block text-sm font-medium text-gray-700">–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è (—á–∞—Å—ã)</label>
    <input
      type="number"
      step="0.5"
      min="0"
      id="event-time-estimate"
      class="border rounded w-full p-2 mb-4"
      value="${timeEstimateValue}"
      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, 2.5"
    >

      <label class="block text-sm font-medium text-gray-700">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
      <textarea
        id="event-comment"
        class="border rounded w-full p-2 mb-4"
        rows="3"
        placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
      >${commentValue}</textarea>



        <!-- –ß–µ–∫–±–æ–∫—Å "–£—á–∏—Ç—ã–≤–∞—Ç—å –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è" -->
    ${timeTrackingCheckbox}

      <div class="flex justify-end gap-4">
        <button
          type="button"
          id="cancel-event"
          class="bg-gray-400 text-white px-4 py-2 rounded hover:bg-gray-600"
        >–û—Ç–º–µ–Ω–∞</button>
        ${deleteButtonHTML}
        <button
          type="submit"
          class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700"
        >${submitButtonText}</button>
      </div>
    </form>
  `;

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ isEditMode:', isEditMode);
  console.log('üîç eventData?.extendedProps:', eventData?.extendedProps);
  console.log('üîç bitrix24Id:', eventData?.extendedProps?.bitrix24Id);

  const modalInstance = createModal(modalTitle, formContent, { width: '600px', maxHeight: '80vh' });

  if (isEditMode && eventData?.extendedProps?.bitrix24Id) {
    console.log('‚è≥ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–¥–∞—á–∏...');

    setTimeout(() => {
      const taskTitleElement = document.getElementById('task-title-link');
      if (taskTitleElement) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç task-title-link, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞');

        taskTitleElement.addEventListener('click', () => {
          const taskId = taskTitleElement.getAttribute('data-task-id');
          const executorId = eventData?.extendedProps.executor || '0'; // –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º 0
          const taskUrl = `/company/personal/user/${executorId}/tasks/task/view/${taskId}/`;

          console.log('üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É:', taskUrl); // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º

          BX24.openPath(taskUrl, function (result) {
            console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ —Å–ª–∞–π–¥–µ—Ä–µ:', taskUrl, '–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
          });
        });
      } else {
        console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç task-title-link! –ü—Ä–æ–≤–µ—Ä—å —Ä–∞–∑–º–µ—Ç–∫—É.');
      }
    }, 0); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
  }

  const finishDatetimeInput = document.getElementById('event-finish-datetime');
  const deadlineInput = document.getElementById('event-deadline-datetime');

  if (finishDatetimeInput && deadlineInput && settings?.dynamicDeadline) {
    deadlineInput.value = finishDatetimeInput.value;
  }

  if (finishDatetimeInput && deadlineInput) {
    finishDatetimeInput.addEventListener('change', (e) => {
      if (settings?.dynamicDeadline) {
        deadlineInput.value = e.target.value;
      }
    });
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–≥—Ä—É–ø–ø)
  const projContainer = document.getElementById('project-container');
  if (projContainer) {
    const projectSelect = document.createElement('select');
    projectSelect.id = 'event-project';
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ –∫–ª–∞—Å—Å—ã, —á—Ç–æ –∏ —É —Å–µ–ª–µ–∫—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    projectSelect.className = 'custom-executor border rounded w-full p-2 mb-4';

    const defOpt = document.createElement('option');
    defOpt.value = '';
    defOpt.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç';
    projectSelect.appendChild(defOpt);
    projContainer.appendChild(projectSelect);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    getProjects((groups) => {
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç—ã:', groups);
      groups.forEach((g) => {
        const opt = document.createElement('option');
        opt.value = g.ID;
        opt.textContent = g.NAME;
        projectSelect.appendChild(opt);
      });
      // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–∂–µ –µ—Å—Ç—å groupId, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ:
      if (isEditMode && groupIdValue) {
        projectSelect.value = String(groupIdValue);
      }
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Select2 –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
      if ($.fn.select2) {
        $(projectSelect).select2({
          placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç',
          allowClear: true,
          width: 'style',
          dropdownParent: $(modalInstance.modalElement),
        });
        if (isEditMode && groupIdValue) {
          $(projectSelect).val(String(groupIdValue)).trigger('change');
        }
      }
    });
  }

  // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
  document.getElementById('cancel-event').addEventListener('click', () => {
    modalInstance.close();
  });

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, –µ—Å–ª–∏ userFilterValue === 'all'
  if (userFilterValue === 'all') {
    const executorBlock = document.getElementById('executor-container');
    if (executorBlock) {
      getUsers((users) => {
        const selectEl = document.createElement('select');
        selectEl.id = 'event-executor';
        selectEl.className = 'custom-executor border rounded w-full p-2 mb-4';

        const defaultOpt = document.createElement('option');
        defaultOpt.value = '';
        defaultOpt.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è';
        selectEl.appendChild(defaultOpt);

        users.forEach((u) => {
          const opt = document.createElement('option');
          opt.value = u.ID;
          opt.textContent = `${u.NAME} ${u.LAST_NAME}`;
          selectEl.appendChild(opt);
        });

        executorBlock.appendChild(selectEl);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º select2
        if ($.fn.select2) {
          $(selectEl).select2({
            placeholder: '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è',
            allowClear: true,
            width: 'style',
            dropdownParent: $(modalInstance.modalElement),
          });
          if (isEditMode && eventData?.extendedProps?.executor) {
            $(selectEl).val(eventData?.extendedProps.executor).trigger('change');
          }
        }
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–±–º–∏—Ç–∞ —Ñ–æ—Ä–º—ã
  document.getElementById('event-form').addEventListener('submit', (e) => {
    e.preventDefault();

    const title = document.getElementById('event-title').value.trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const startDateVal = document.getElementById('event-date').value;
    const finishDateVal = document.getElementById('event-finish-date').value;
    const deadline = document.getElementById('event-deadline').value;
    const comment = document.getElementById('event-comment').value.trim();
    const projectSelect = document.getElementById('event-project');
    const groupId = projectSelect?.value ? parseInt(projectSelect.value, 10) : null;
    const timeEstInput = document.getElementById('event-time-estimate');
    const hours = parseFloat(timeEstInput.value) || 0;
    const timeEstimateSec = Math.round(hours * 3600);
    const allowTimeTrackingChecked = document.getElementById('allow-time-tracking').checked;
    const allowTimeTracking = allowTimeTrackingChecked ? 'Y' : 'N';

    let executor = '';
    if (userFilterValue === 'all') {
      const exSel = document.getElementById('event-executor');
      executor = exSel?.value || '';
    } else {
      executor = userFilterValue;
    }

    let startTimeVal, endTimeVal;
    if (allDay) {
      // "–í–µ—Å—å –¥–µ–Ω—å" = 09:00‚Äì18:00
      startTimeVal = settings.slotMinTime;
      endTimeVal = settings.slotMaxTime;
    } else {
      // –ù–µ "–í–µ—Å—å –¥–µ–Ω—å" ‚Äî –±–µ—Ä—ë–º –∏–Ω–ø—É—Ç—ã
      startTimeVal = document.getElementById('event-start-time')?.value || settings.slotMinTime;
      endTimeVal = document.getElementById('event-end-time')?.value || settings.slotMaxTime;
    }

    const eventStart = `${startDateVal}T${startTimeVal}`;
    const eventEnd = `${finishDateVal}T${endTimeVal}`;

    const taskData = {
      title,
      comment,
      executor,
      start: eventStart,
      end: eventEnd,
      deadline,
      allDay: allDay, // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É Bitrix
      timeEstimate: timeEstimateSec,
      groupId,
      allowTimeTracking, // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∑–∞–¥–∞—á—É
    };

    console.log('–°–º–æ—Ç—Ä–∏–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏:', taskData);
    let responsibleName = '';
    if (userFilterValue !== 'all') {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –±–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ option
      responsibleName = globalSelect?.selectedOptions[0]?.textContent || '';
    } else {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç "all", —Ç–æ –∏–∑ —Å–µ–ª–µ–∫—Ç–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
      const exSel = document.getElementById('event-executor');
      responsibleName = exSel?.selectedOptions[0]?.textContent || '';
    }

    if (isNew) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      createTask(taskData, (res, err) => {
        if (err) {
          alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏');
        } else {
          if (window.calendar && res?.task?.id) {
            const realId = res.task.id;
            const newTaskColor = colorMap[executor] || '#cccccc'; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç
            console.log('üöÄ –ù–æ–≤—ã–π —Ü–≤–µ—Ç –∑–∞–¥–∞—á–∏:', newTaskColor);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ transformTaskToEvent:
            const newTaskObject = {
              ...taskData,
              id: realId,
              // –î–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞–Ω–æ–≤—ã–µ –¥–∞—Ç—ã:
              startDatePlan: eventStart,
              endDatePlan: eventEnd,
              // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ "–Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å", –≤—ã—Å—Ç–∞–≤–ª—è–µ–º xmlId:
              xmlId: allDay ? 'ALLDAY' : null,
              responsibleId: executor,
              responsibleName,
            };

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ–±—ã—Ç–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –º–∞—Å—Å–∏–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
            const transformed = transformTaskToEvent(newTaskObject, colorMap);
            const eventsToAdd = Array.isArray(transformed) ? transformed : [transformed];

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            eventsToAdd.forEach((ev) => {
              window.calendar.addEvent(ev);
            });

            console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', realId);
          }
        }
      });
    } else {
      // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      const taskId = eventData?.extendedProps?.bitrix24Id || eventData?.id;
      updateTask(taskId, taskData, (res, err) => {
        if (err) {
          alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
        } else {
          // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
          const updatedTaskObject = {
            ...taskData,
            id: taskId,
            startDatePlan: eventStart,
            endDatePlan: eventEnd,
            xmlId: allDay ? 'ALLDAY' : null,
            responsibleId: executor,
            responsibleName,
            allowTimeTracking, // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∑–∞–¥–∞—á—É
          };

          const transformed = transformTaskToEvent(updatedTaskObject, colorMap);
          // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
          const updatedEvent = Array.isArray(transformed) ? transformed[0] : transformed;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
          eventData.setProp('title', updatedEvent.title);
          eventData.setStart(updatedEvent.start);
          eventData.setEnd(updatedEvent.end);
          // –û–±–Ω–æ–≤–ª—è–µ–º extendedProps –ø–æ–ª–Ω–æ—Å—Ç—å—é
          Object.keys(updatedEvent.extendedProps).forEach((key) => {
            eventData.setExtendedProp(key, updatedEvent.extendedProps[key]);
          });

          console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', taskId);
        }
      });
    }

    modalInstance.close();
  });

  function shorten(text, maxLen) {
    if (!text) return '';
    if (text.length <= maxLen) {
      return text;
    }
    return text.slice(0, maxLen - 3) + '...';
  }

  if (!isNew) {
    const reportBtn = document.getElementById('generate-report');
    if (reportBtn) {
      reportBtn.addEventListener('click', async () => {
        // 1. –°—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—è
        let titleField = document.getElementById('event-title').value.trim();
        let commentField = document.getElementById('event-comment').value.trim();

        // 2. –°–æ–∫—Ä–∞—â–∞–µ–º –∏—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç
        //    (–ù–∞–ø—Ä–∏–º–µ—Ä, 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è, 100 –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
        titleField = shorten(titleField, 50);
        commentField = shorten(commentField, 100);

        // 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç (—Å—ã—Ä–æ–π)
        let rawPrompt = `
–°–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–¥–∞—á–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ: "${titleField}"
–û–ø–∏—Å–∞–Ω–∏–µ: "${commentField}"
–ù–∞–ø–∏—à–∏ –æ—Ç—á—ë—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –≤ –ø–æ–Ω—è—Ç–Ω–æ–º –≤–∏–¥–µ, –º–∞–∫—Å–∏–º—É–º 10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
`;

        // 4. –ò –µ—â—ë —Ä–∞–∑ –ø–æ–¥—Ä–µ–∑–∞–µ–º —Å–∞–º –ø—Ä–æ–º–ø—Ç, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±—ã–ª –¥–ª–∏–Ω–Ω–µ–µ 256 —Å–∏–º–≤–æ–ª–æ–≤
        const finalPrompt = shorten(rawPrompt, 256);
        console.log('üìù –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI:', finalPrompt);

        try {
          // 5. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é AI
          const aiAnswer = await askAiReport(finalPrompt);
          console.log('–û—Ç–≤–µ—Ç AI:', aiAnswer);

          // 6. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          showAiReportModal(aiAnswer);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—á—ë—Ç–∞:', err);
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞');
        }
      });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  if (!isNew) {
    document.getElementById('delete-event').addEventListener('click', () => {
      const taskId = eventData?.extendedProps?.bitrix24Id || eventData?.id;
      if (!taskId) {
        console.error('‚ùå –û—à–∏–±–∫–∞: ID –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
      }
      deleteTask(taskId, (success, err) => {
        if (success) {
          eventData?.remove();
          console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:', taskId);
        } else {
          alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏');
        }
        modalInstance.close();
      });
    });
  }
}
