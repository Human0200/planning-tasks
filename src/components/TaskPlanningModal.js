import { loadAllTasksforunPlanned, loadUnplannedTasks } from '../services/taskService.js';
import { getUsers } from '../services/userService.js';
import { openEditModal } from './EditTaskModal.js';
import { createModal } from './Modal.js';

export function showTaskPlanningModal() {
  const title = '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á';

  const content = `
    <div class="task-planning-container">
      <div class="flex gap-4 mb-4">
        <!-- –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ -->
        <input 
          type="text" 
          id="taskSearch" 
          class="border p-2 flex-grow" 
          placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
        />

        <!-- –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º -->
        <select id="userFilter" class="border p-2">
          <option value="all">–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</option>
        </select>
      </div>

      <!-- –ß–µ–∫–±–æ–∫—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á -->
      <label class="flex items-center gap-2 mb-4">
        <input type="checkbox" id="showOverdueTasks" class="cursor-pointer" />
        <span>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</span>
      </label>

      <div id="task-list" class="max-h-80 overflow-auto border-t border-b"></div>
    </div>
  `;

  createModal(title, content, { width: '700px' });

  const taskListContainer = document.getElementById('task-list');
  const searchInput = document.getElementById('taskSearch');
  const userFilter = document.getElementById('userFilter');
  const overdueCheckbox = document.getElementById('showOverdueTasks');

  let allTasks = []; // –•—Ä–∞–Ω–∏–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  let overdueTasks = []; // –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∏–ª—å—Ç—Ä
  getUsers((users) => {
    users.forEach((user) => {
      const option = document.createElement('option');
      option.value = user.ID;
      option.textContent = `${user.NAME} ${user.LAST_NAME}`;
      userFilter.appendChild(option);
    });
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º **–æ–±—ã—á–Ω—ã–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏**
  function loadTasks() {
    loadUnplannedTasks((tasks) => {
      allTasks = tasks; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
      filterAndRenderTasks();
    });
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º **–≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–∞**
  function loadOverdueTasks() {
    loadAllTasksforunPlanned((tasks) => {
      const now = new Date();
      overdueTasks = tasks.filter((task) => {
        // ‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–¥–∞—á–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö `endDatePlan` –ø—É—Å—Ç–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if (!task.endDatePlan || task.endDatePlan.trim() === '') {
          return false;
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
        return new Date(task.endDatePlan) < now && ['1', '2', '3'].includes(task.status);
      });

      filterAndRenderTasks();
    });
  }

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
  function filterAndRenderTasks() {
    const showOverdueOnly = overdueCheckbox.checked;
    const selectedUser = userFilter.value;
    const query = searchInput.value.toLowerCase();

    let filteredTasks = allTasks; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

    if (showOverdueOnly) {
      filteredTasks = [...allTasks, ...overdueTasks]; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (selectedUser !== 'all') {
      filteredTasks = filteredTasks.filter((task) => task.responsibleId === selectedUser);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (query) {
      filteredTasks = filteredTasks.filter((task) => task.title.toLowerCase().includes(query));
    }

    renderTaskList(filteredTasks);
  }

  function renderTaskList(tasks) {
    taskListContainer.innerHTML = '';
    tasks.forEach((task) => {
      const taskRow = document.createElement('div');
      taskRow.className = 'flex items-center justify-between py-2 px-2 border-b';

      taskRow.innerHTML = `
        <div class="flex flex-col">
          <a href="#" class="text-blue-600 hover:underline" data-task-id="${task.id}">
            ${task.title}
          </a>
          <p class="text-gray-500 text-sm">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${
            task.responsibleName || (task.responsible ? task.responsible.name : '–ù–µ —É–∫–∞–∑–∞–Ω')
          }</p>
        </div>
        <button class="bg-gray-300 px-3 py-1 rounded task-edit-btn" data-task-id="${task.id}">
          ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        </button>
      `;

      taskListContainer.appendChild(taskRow);
    });
  }

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ª–∞–π–¥–µ—Ä–µ Bitrix24
  taskListContainer.addEventListener('click', (e) => {
    if (e.target.closest('.task-edit-btn')) return;

    const link = e.target.closest('[data-task-id]');
    if (link) {
      const taskId = link.getAttribute('data-task-id');
      const taskUrl = `/company/personal/user/8/tasks/task/view/${taskId}/`;

      BX24.openPath(taskUrl, function (result) {
        console.log('üîó –û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–¥–∞—á–∞:', taskUrl, '–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  taskListContainer.addEventListener('click', (e) => {
    const button = e.target.closest('.task-edit-btn');
    if (button) {
      const taskId = button.getAttribute('data-task-id');
      openEditModal(taskId);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  searchInput.addEventListener('input', filterAndRenderTasks);
  userFilter.addEventListener('change', filterAndRenderTasks);
  overdueCheckbox.addEventListener('change', () => {
    if (overdueCheckbox.checked) {
      loadOverdueTasks(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤–∫–ª—é—á–µ–Ω
    } else {
      filterAndRenderTasks(); // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å –≤—ã–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å
    }
  });

  loadTasks();

  window.addEventListener('taskUpdated', (e) => {
    // –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —á–µ–∫–±–æ–∫—Å "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", –≤—ã–∑—ã–≤–∞–µ–º loadOverdueTasks, –∏–Ω–∞—á–µ loadTasks
    if (document.getElementById('showOverdueTasks')?.checked) {
      loadOverdueTasks();
    } else {
      loadTasks();
    }
  });
}
