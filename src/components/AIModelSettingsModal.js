// src/components/AIModelSettingsModal.js

import { loadAIModel } from '../services/aiService.js';
import { createModal } from './Modal.js';

export function showAIModelSettingsModal() {
  const title = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –ò–ò (AI/ML API)';

  const content = `
    <div class="ai-model-settings-container">
      <!-- –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ -->
      <div class="mb-4">
        <input 
          type="text" 
          id="aiModelSearch" 
          class="border p-2 w-full" 
          placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –º–æ–¥–µ–ª–∏..."
        >
      </div>

      <!-- –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π -->
      <div 
        id="aiModelList" 
        class="space-y-2 max-h-60 overflow-auto border-t border-b p-2"
      ></div>

      <!-- –ö–Ω–æ–ø–∫–∏ -->
      <div class="flex justify-end gap-4 mt-4">
        <button 
          id="cancel-ai-model" 
          class="bg-gray-400 text-white px-4 py-2 rounded hover:bg-gray-600"
        >
          –û—Ç–º–µ–Ω–∞
        </button>
        <button 
          id="save-ai-model" 
          class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>
      </div>
    </div>
  `;

  const modal = createModal(title, content, { width: '600px' });

  // üîπ –°–ø–∏—Å–æ–∫ —Å—É–±-–º–æ–¥–µ–ª–µ–π –∏–∑ AI/ML API.
  // (–ü—Ä–∏–º–µ—Ä—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ aimlapi.com)
  const modelData = [
    {
      id: 'mistralai/Mistral-7B-Instruct-v0.2',
      name: 'Mistral 7B Instruct',
      description: 'OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –º–æ–¥–µ–ª—å Mistral 7B (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏).',
    },
    {
      id: 'qwen/QwenTurbo',
      name: 'Qwen Turbo',
      description: '–ü—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–∏ Qwen (Alibaba) —á–µ—Ä–µ–∑ aimlapi.',
    },
    {
      id: 'claude/AnthropicClaude2',
      name: 'Anthropic Claude 2',
      description: '–ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ aimlapi.',
    },
    // –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–∞–ª—å—à–µ –ª—é–±—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:
    // { id: '...', name: '...', description: '...' },
  ];

  // 1) –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫
  const modelList = document.getElementById('aiModelList');
  modelList.innerHTML = modelData
    .map(
      (m) => `
      <label class="flex items-center p-2 border rounded hover:bg-gray-100 cursor-pointer">
        <input type="radio" name="aiModel" value="${m.id}" class="mr-2">
        <div>
          <div class="font-semibold">${m.name}</div>
          <div class="text-sm text-gray-600">${m.description}</div>
        </div>
      </label>
    `,
    )
    .join('');

  // 2) –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
  loadAIModel()
    .then((savedModel) => {
      if (savedModel) {
        // –°—Ç–∞–≤–∏–º "checked" –Ω–∞ —Ç—É, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞
        const radio = modelList.querySelector(`input[name="aiModel"][value="${savedModel}"]`);
        if (radio) {
          radio.checked = true;
        }
      }
    })
    .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ loadAIModel:', err));

  // 3) –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
  const searchInput = document.getElementById('aiModelSearch');
  searchInput.addEventListener('input', () => {
    const query = searchInput.value.toLowerCase();
    const labels = modelList.querySelectorAll('label');
    labels.forEach((label) => {
      const text = label.textContent.toLowerCase();
      label.style.display = text.includes(query) ? 'flex' : 'none';
    });
  });

  // 4) –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
  document.getElementById('cancel-ai-model').addEventListener('click', () => {
    modal.close();
  });

  // 5) –ö–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª (–∑–∞–ø–∏—Å–∞—Ç—å –≤ Bitrix24)
  document.getElementById('save-ai-model').addEventListener('click', () => {
    const selected = document.querySelector('input[name="aiModel"]:checked');
    if (!selected) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò (aimlapi).');
      return;
    }
    const selectedModel = selected.value;

    BX24.callMethod('app.option.set', { options: { ai_model: selectedModel } }, (res) => {
      if (res.error()) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ò–ò:', res.error());
        alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏ –ò–ò.');
      } else {
        console.log('‚úÖ –ú–æ–¥–µ–ª—å –ò–ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', selectedModel);
        modal.close();
      }
    });
  });
}
