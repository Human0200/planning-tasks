import { updateTask } from '../services/taskService.js';
import { createModal } from './Modal.js';

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.
 * @param {string|number} taskId - ID –∑–∞–¥–∞—á–∏.
 */
export function openEditModal(taskId) {
  const title = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ #${taskId}`;

  const content = `

  <!-- –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏ –≤ Bitrix24 -->
<label class="block mb-2">
  <span class="text-gray-700">–ó–∞–¥–∞—á–∞ –≤ Bitrix24:</span>
  <div id="task-title-link"
       class="border rounded w-full p-2 mb-4 bg-gray-100 text-blue-600 hover:underline cursor-pointer">
    –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É
  </div>
</label>

    <div class="edit-task-container">
      <label class="block mb-2">
        <span class="text-gray-700">–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</span>
        <input type="text" id="editTaskTitle" class="border p-2 w-full" />
      </label>

      <label class="block mb-2">
        <span class="text-gray-700">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</span>
        <input type="text" id="editTaskResponsible" class="border p-2 w-full bg-gray-200" readonly />
        <input type="hidden" id="editTaskResponsibleId" />
      </label>

      <label class="block mb-2">
        <span class="text-gray-700">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</span>
        <input type="datetime-local" id="editStartDate" class="border p-2 w-full" />
      </label>

      <label class="block mb-2">
        <span class="text-gray-700">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</span>
        <input type="datetime-local" id="editEndDate" class="border p-2 w-full" />
      </label>

      <label class="block mb-2">
        <span class="text-gray-700">–ö—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫:</span>
        <input type="datetime-local" id="editDeadline" class="border p-2 w-full" />
      </label>

      <label class="block mb-2">
        <span class="text-gray-700">–û—Ü–µ–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —á–∞—Å–∞—Ö):</span>
        <input type="number" id="editTimeEstimate" class="border p-2 w-full" min="0" step="0.5" />
      </label>
      
      <!-- –ù–æ–≤–æ–µ –ø–æ–ª–µ: –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è -->
      <label class="block mb-2">
        <span class="text-gray-700">–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —á–∞—Å–∞—Ö):</span>
        <input type="number" id="editTimeSpent" class="border p-2 w-full bg-gray-200" readonly />
      </label>

       <!-- –ù–æ–≤—ã–π —á–µ–∫–±–æ–∫—Å: –†–∞–∑—Ä–µ—à–∏—Ç—å —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ -->
      <label class="block mb-2 flex items-center gap-2">
        <input type="checkbox" id="allowTimeTracking" class="cursor-pointer" />
        <span class="text-gray-700">–†–∞–∑—Ä–µ—à–∏—Ç—å —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏</span>
      </label>

      <div class="flex justify-end gap-4 mt-6">
        <button id="cancel-edit-task" class="bg-gray-400 text-white px-4 py-2 rounded hover:bg-gray-600">
          –û—Ç–º–µ–Ω–∞
        </button>
        <button id="save-edit-task" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700">
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>
      </div>
    </div>
  `;

  // –°–æ–∑–¥–∞—ë–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const modalInstance = createModal(title, content, { width: '500px', maxHeight: '80vh' });
  let originalComment = '';
  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç Bitrix24 (YYYY-MM-DDTHH:MM:SS)
   * @param {string} dateStr - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ datetime-local (–∏–∑ `<input type="datetime-local">`)
   * @returns {string|null} - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Bitrix24 –∏–ª–∏ null
   */
  function formatDateToBitrix(dateStr) {
    if (!dateStr) return null;

    const date = new Date(dateStr);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ `YYYY-MM-DDTHH:MM:SS`
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    const seconds = '00'; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã

    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
  }

  function toLocalDateTimeString(dateStr) {
    if (!dateStr) return '';

    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date
    const date = new Date(dateStr);

    // –°–¥–≤–∏–≥–∞–µ–º –¥–∞—Ç—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π offset,
    // —á—Ç–æ–±—ã –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º .toISOString() —É –Ω–∞—Å —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å "–º–µ—Å—Ç–Ω–æ–µ" –≤—Ä–µ–º—è
    // (–µ—Å–ª–∏ dateStr —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç +03:00, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
    // date.setMinutes(date.getMinutes() - date.getTimezoneOffset());

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É "YYYY-MM-DDTHH:MM" (–±–µ–∑ `Z` –∏ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ UTC)
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');

    return `${year}-${month}-${day}T${hours}:${minutes}`;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  BX24.callMethod('tasks.task.get', { taskId }, (res) => {
    if (res.error()) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏:', res.error());
      return;
    }

    const task = res.data().task;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    originalComment = task.description || '';

    document.getElementById('editTaskTitle').value = task.title || '';

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ datetime-local
    document.getElementById('editStartDate').value = task.startDatePlan
      ? toLocalDateTimeString(task.startDatePlan)
      : '';
    document.getElementById('editEndDate').value = task.endDatePlan
      ? toLocalDateTimeString(task.endDatePlan)
      : '';
    document.getElementById('editDeadline').value = task.deadline
      ? toLocalDateTimeString(task.deadline)
      : '';
    document.getElementById('editTimeEstimate').value = task.timeEstimate
      ? (task.timeEstimate / 3600).toFixed(2)
      : '';

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ "–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è" (–ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã)
    document.getElementById('editTimeSpent').value = task.timeSpentInLogs
      ? (task.timeSpentInLogs / 3600).toFixed(2)
      : '';
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞ allowTimeTracking
    document.getElementById('allowTimeTracking').checked = task.allowTimeTracking === 'Y';
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ (readonly) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    const responsibleField = document.getElementById('editTaskResponsible');
    responsibleField.value = task.responsible?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
    document.getElementById('editTaskResponsibleId').value = task.responsible?.id || '';

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –≤ Bitrix24
    const taskTitleElement = document.getElementById('task-title-link');
    taskTitleElement.setAttribute('data-task-id', taskId);
    taskTitleElement.addEventListener('click', () => {
      const executorId = task.responsible?.id || '0'; // –ï—Å–ª–∏ –Ω–µ—Ç ID, —Å—Ç–∞–≤–∏–º 0
      const taskUrl = `/company/personal/user/${executorId}/tasks/task/view/${taskId}/`;

      console.log('üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É:', taskUrl);

      BX24.openPath(taskUrl, function (result) {
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ —Å–ª–∞–π–¥–µ—Ä–µ:', taskUrl, '–†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      });
    });
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ü–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º
  if (!window.colorMap) {
    BX24.callMethod('app.option.get', { option: 'user_colors' }, (res) => {
      if (res.error()) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', res.error());
        window.colorMap = {}; // –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å undefined
      } else {
        window.colorMap = res.data() || {};
      }
    });
  }

  const editEndDateInput = document.getElementById('editEndDate');
  const editDeadlineInput = document.getElementById('editDeadline');

  if (editEndDateInput && editDeadlineInput && window.calendarSettings?.dynamicDeadline) {
    // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ä–∞–∑—É –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫
    editDeadlineInput.value = editEndDateInput.value;

    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫
    editEndDateInput.addEventListener('change', (e) => {
      editDeadlineInput.value = e.target.value;
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
  document.getElementById('save-edit-task').addEventListener('click', () => {
    const updatedTask = {
      title: document.getElementById('editTaskTitle').value,
      start: formatDateToBitrix(document.getElementById('editStartDate').value) || null,
      end: formatDateToBitrix(document.getElementById('editEndDate').value) || null,
      deadline: formatDateToBitrix(document.getElementById('editDeadline').value) || null,
      timeEstimate: document.getElementById('editTimeEstimate').value
        ? document.getElementById('editTimeEstimate').value * 3600
        : null,
      executor: parseInt(document.getElementById('editTaskResponsibleId').value, 10) || null,
      comment: originalComment,
      allowTimeTracking: document.getElementById('allowTimeTracking').checked ? 'Y' : 'N',
      // –ü–æ–ª–µ timeSpentInLogs –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ updateTask
    };

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updatedTask);

    updateTask(taskId, updatedTask, (res, err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', err);
        return;
      }

      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!`, res);
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      modalInstance.close();

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      if (window.calendar) {
        let event = window.calendar.getEventById(taskId);
        const executorId = updatedTask.executor;
        const color = window.colorMap?.[executorId] || '#cccccc';

        if (event) {
          event.setProp('title', updatedTask.title);
          event.setDates(updatedTask.start, updatedTask.end);
          event.setProp('backgroundColor', color);
          event.setProp('borderColor', color);
        } else {
          window.calendar.addEvent({
            id: taskId,
            title: updatedTask.title,
            start: updatedTask.start,
            end: updatedTask.end,
            backgroundColor: color,
            borderColor: color,
            textColor: '#ffffff',
            extendedProps: {
              originalStart: updatedTask.start,
              originalEnd: updatedTask.end,
              executor: executorId,
              deadline: updatedTask.deadline,
              allowTimeTracking: updatedTask.allowTimeTracking,
            },
          });
        }
      }

      // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
      window.dispatchEvent(new CustomEvent('taskUpdated', { detail: { taskId } }));

      // üîπ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      console.log('üîÑ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
      const selectedUser = document.getElementById('user-select')?.value || 'all'; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      window.filterEvents(selectedUser);
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
  document.getElementById('cancel-edit-task').addEventListener('click', () => {
    modalInstance.close();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "√ó" (–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏) –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç–∏–µ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ createModal.
}
