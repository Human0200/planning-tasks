// src/services/taskService.js

/**
 * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {Object} taskData - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function createTask(taskData, callback) {
  BX24.callMethod(
    'tasks.task.add',
    {
      fields: {
        TITLE: taskData.title,
        DESCRIPTION: taskData.comment,
        RESPONSIBLE_ID: taskData.executor, // ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (—Ä–µ–∞–ª—å–Ω—ã–π ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ userService)
        START_DATE_PLAN: taskData.start,
        END_DATA_PLAN: taskData.end,
        END_DATE_PLAN: taskData.end,
        DEADLINE: taskData.deadline,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —Ç–µ–≥–∏ –∏ —Ç.–¥.)
      },
    },
    (result) => {
      if (result.error()) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
        callback(null, result.error());
      } else {
        callback(result.data());
      }
    },
  );
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {String|Number} taskId - ID –∑–∞–¥–∞—á–∏.
 * @param {Object} taskData - –û–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function updateTask(taskId, taskData, callback) {
  BX24.callMethod(
    'tasks.task.update',
    {
      taskId: taskId,
      fields: {
        TITLE: taskData.title,
        DESCRIPTION: taskData.comment,
        RESPONSIBLE_ID: taskData.executor,
        START_DATE_PLAN: taskData.start,
        END_DATE_PLAN: taskData.end,
        DEADLINE: taskData.deadline,
      },
    },
    (result) => {
      if (result.error()) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
        callback(null, result.error());
      } else {
        callback(result.data());
      }
    },
  );
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {String|Number} taskId - ID –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function deleteTask(taskId, callback) {
  BX24.callMethod('tasks.task.delete', { taskId }, (result) => {
    if (result.error()) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
      callback(false, result.error());
    } else {
      callback(true);
    }
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ batch-–∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ.
 * –í SELECT —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –≤ –≤—ã—Å–æ–∫–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –Ω–æ Bitrix24 –≤–µ—Ä–Ω—ë—Ç –∏—Ö –≤ –Ω–∏–∂–Ω–µ–º.
 * @param {Function} callback (tasks, error) => {}
 */
export function loadAllTasks(callback) {
  let tasks = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
  let currentPage = 1;
  let isLoading = false;

  function fetchPage(page) {
    if (isLoading) return;
    isLoading = true;

    console.log(`üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}...`);
    BX24.callMethod(
      'tasks.task.list',
      {
        FILTER: {}, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        SELECT: ['ID', 'TITLE', 'RESPONSIBLE_ID', 'START_DATE_PLAN', 'END_DATE_PLAN', 'DEADLINE'],
        PARAMS: { NAV_PARAMS: { NAV_PAGE_SIZE: 50, NAV_PAGE: page } },
      },
      (res) => {
        isLoading = false;

        if (res.error()) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:', res.error());
          callback(null, res.error());
          return;
        }

        const data = res.data();
        if (!data || !Array.isArray(data.tasks) || data.tasks.length === 0) {
          console.log('‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.');
          callback(Array.from(tasks.values()), null);
          return;
        }

        console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${data.tasks.length} –∑–∞–¥–∞—á(–∏) —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}.`);

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ Map (ID => –æ–±—ä–µ–∫—Ç)
        data.tasks.forEach((task) => {
          tasks.set(task.id, task); // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π)
        const next = res.answer?.next;
        if (next && next > page) {
          console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${next}`);
          fetchPage(next);
        } else {
          console.log(`‚úÖ –í—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.size}`);
          callback(Array.from(tasks.values()), null);
        }
      },
    );
  }

  // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  fetchPage(currentPage);
}
