// src/services/taskService.js

/**
 * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {Object} taskData - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function createTask(taskData, callback) {
  console.log('üìù –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', taskData);
  BX24.callMethod(
    'tasks.task.add',
    {
      fields: {
        TITLE: taskData.title,
        DESCRIPTION: taskData.comment || null || '',
        RESPONSIBLE_ID: taskData.executor, // ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (—Ä–µ–∞–ª—å–Ω—ã–π ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ userService)
        START_DATE_PLAN: taskData.start,
        END_DATE_PLAN: taskData.end,
        DEADLINE: taskData.deadline || null || '',
        XML_ID: taskData.allDay ? 'ALLDAY' : null, // ‚úÖ –¢–æ–ª—å–∫–æ –¥–ª—è "–í–µ—Å—å –¥–µ–Ω—å"
        GROUP_ID: taskData.groupId, // <-- —Ç—É—Ç
        TIME_ESTIMATE: taskData.timeEstimate || null,
        ALLOW_TIME_TRACKING: taskData.allowTimeTracking,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —Ç–µ–≥–∏ –∏ —Ç.–¥.)
      },
    },
    (result) => {
      if (result.error()) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
        callback(null, result.error());
      } else {
        callback(result.data());
      }
    },
  );
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {String|Number} taskId - ID –∑–∞–¥–∞—á–∏.
 * @param {Object} taskData - –û–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function updateTask(taskId, taskData, callback) {
  BX24.callMethod(
    'tasks.task.update',
    {
      taskId: taskId,
      fields: {
        TITLE: taskData.title,
        DESCRIPTION: taskData.comment,
        RESPONSIBLE_ID: taskData.executor,
        START_DATE_PLAN: taskData.start,
        END_DATE_PLAN: taskData.end,
        DEADLINE: taskData.deadline,
        TIME_ESTIMATE: taskData.timeEstimate || null,
        ALLOW_TIME_TRACKING: taskData.allowTimeTracking,
      },
    },
    (result) => {
      if (result.error()) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
        callback(null, result.error());
      } else {
        callback(result.data());
      }
    },
  );
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {String|Number} taskId - ID –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function deleteTask(taskId, callback) {
  console.log('üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å ID:', taskId, typeof taskId);
  BX24.callMethod('tasks.task.delete', { taskId }, (result) => {
    if (result.error()) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
      callback(false, result.error());
    } else {
      callback(true);
    }
  });
}

export function loadAllTasks(callback) {
  let tasks = new Map();
  let batchSize = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
  let maxBatch = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–Ω–æ–º batch-–∑–∞–ø—Ä–æ—Å–µ
  let startIndex = 0;

  function fetchBatch(start) {
    let batch = {};
    console.log(`üì° –ó–∞–ø—Ä–æ—Å batch —Å ${maxBatch} —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å ${start}`);

    for (let i = 0; i < maxBatch; i++) {
      let startPosition = start + i * batchSize;
      batch[`page_${i}`] = [
        'tasks.task.list',
        {
          filter: { '!TIME_ESTIMATE': null }, // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
          SELECT: ['ID', 'TITLE', 'RESPONSIBLE_ID', 'START_DATE_PLAN', 'END_DATE_PLAN', 'DEADLINE'],
          start: startPosition,
        },
      ];
    }

    BX24.callBatch(batch, (res) => {
      let hasMore = false;

      for (let key in res) {
        if (res[key].error()) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á (${key}):`, res[key].error());
          callback(null, res[key].error());
          return;
        }

        const data = res[key].data();
        if (data && Array.isArray(data.tasks) && data.tasks.length > 0) {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${data.tasks.length} –∑–∞–¥–∞—á(–∏) —Å ${key}`);

          data.tasks.forEach((task) => {
            tasks.set(task.id, task);
          });

          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –µ—Å—Ç—å –µ—â–µ –∑–∞–¥–∞—á–∏
          hasMore = true;
        }
      }

      if (hasMore) {
        fetchBatch(start + maxBatch * batchSize);
      } else {
        console.log(`‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.size}`);
        callback(Array.from(tasks.values()), null);
      }
    });
  }

  fetchBatch(startIndex);
}

export function loadAllTasksforunPlanned(callback) {
  let tasks = new Map();
  let batchSize = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
  let maxBatch = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–Ω–æ–º batch-–∑–∞–ø—Ä–æ—Å–µ
  let startIndex = 0;

  function fetchBatch(start) {
    let batch = {};
    console.log(`üì° –ó–∞–ø—Ä–æ—Å batch —Å ${maxBatch} —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å ${start}`);

    for (let i = 0; i < maxBatch; i++) {
      let startPosition = start + i * batchSize;
      batch[`page_${i}`] = [
        'tasks.task.list',
        {
          filter: {
            '<STATUS': 4,
          }, // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
          SELECT: ['ID', 'TITLE', 'RESPONSIBLE_ID', 'START_DATE_PLAN', 'END_DATE_PLAN', 'DEADLINE'],
          start: startPosition,
        },
      ];
    }

    BX24.callBatch(batch, (res) => {
      let hasMore = false;

      for (let key in res) {
        if (res[key].error()) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á (${key}):`, res[key].error());
          callback(null, res[key].error());
          return;
        }

        const data = res[key].data();
        if (data && Array.isArray(data.tasks) && data.tasks.length > 0) {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${data.tasks.length} –∑–∞–¥–∞—á(–∏) —Å ${key}`);

          data.tasks.forEach((task) => {
            tasks.set(task.id, task);
          });

          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –µ—Å—Ç—å –µ—â–µ –∑–∞–¥–∞—á–∏
          hasMore = true;
        }
      }

      if (hasMore) {
        fetchBatch(start + maxBatch * batchSize);
      } else {
        console.log(`‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.size}`);
        callback(Array.from(tasks.values()), null);
      }
    });
  }

  fetchBatch(startIndex);
}

export function loadUnplannedTasks(callback) {
  let tasks = new Map();
  let batchSize = 50;
  let maxBatch = 5;
  let startIndex = 0;

  function fetchBatch(start) {
    let batch = {};
    console.log(`üì° –ó–∞–ø—Ä–æ—Å batch —Å ${maxBatch} —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å ${start}`);

    for (let i = 0; i < maxBatch; i++) {
      let startPosition = start + i * batchSize;
      batch[`page_${i}`] = [
        'tasks.task.list',
        {
          filter: {
            '<STATUS': 4,
          },
          SELECT: [
            'ID',
            'TITLE',
            'RESPONSIBLE_ID',
            'START_DATE_PLAN',
            'END_DATE_PLAN',
            'TIME_ESTIMATE',
            'RESPONSIBLE', // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
          ],
          start: startPosition,
        },
      ];
    }

    BX24.callBatch(batch, (res) => {
      let hasMore = false;

      for (let key in res) {
        if (res[key].error()) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á (${key}):`, res[key].error());
          callback(null, res[key].error());
          return;
        }

        const data = res[key].data();
        if (data && Array.isArray(data.tasks) && data.tasks.length > 0) {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${data.tasks.length} –∑–∞–¥–∞—á(–∏) —Å ${key}`);

          data.tasks.forEach((task) => {
            if (!task.startDatePlan || !task.endDatePlan || !task.timeEstimate) {
              tasks.set(task.id, {
                id: task.id,
                title: task.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                responsibleId: task.responsible?.id || task.responsibleId,
                responsibleName: task.responsible?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω', // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                startDatePlan: task.startDatePlan || '',
                endDatePlan: task.endDatePlan || '',
                timeEstimate: task.timeEstimate || '',
              });
            }
          });

          hasMore = true;
        }
      }

      if (hasMore) {
        fetchBatch(start + maxBatch * batchSize);
      } else {
        console.log(`‚úÖ –í—Å–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ: ${tasks.size}`);
        callback(Array.from(tasks.values()), null);
      }
    });
  }

  fetchBatch(startIndex);
}

export function getProjects(callback) {
  BX24.callMethod('sonet_group.get', {}, (res) => {
    if (res.error()) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', res.error());
      callback([]);
    } else {
      callback(res.data() || []);
    }
  });
}

export function loadAllTasksIncrementally(onComplete, onBatchLoaded, onError) {
  // onComplete ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
  // onBatchLoaded ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∑–∞–¥–∞—á (–Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
  // onError ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ

  let tasks = new Map();
  const batchSize = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const maxBatch = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–Ω–æ–º batch-–∑–∞–ø—Ä–æ—Å–µ
  let startIndex = 0;

  function fetchBatch(start) {
    let batch = {};
    console.log(`üì° –ó–∞–ø—Ä–æ—Å batch —Å ${maxBatch} —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å ${start}`);
    for (let i = 0; i < maxBatch; i++) {
      let startPosition = start + i * batchSize;
      batch[`page_${i}`] = [
        'tasks.task.list',
        {
          filter: { '!TIME_ESTIMATE': null },
          order: { CREATED_DATE: 'DESC' }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤–µ–π—à–∏–µ —Å–Ω–∞—á–∞–ª–∞)
          SELECT: [
            'ID',
            'TITLE',
            'RESPONSIBLE_ID',
            'START_DATE_PLAN',
            'END_DATE_PLAN',
            'DEADLINE',
            'CREATED_DATE',
            'DESCRIPTION',
            'GROUP_ID',
            'TIME_ESTIMATE',
          ],
          start: startPosition,
        },
      ];
    }

    BX24.callBatch(batch, (res) => {
      let hasMore = false;
      let batchTasks = [];
      for (let key in res) {
        if (res[key].error()) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á (${key}):`, res[key].error());
          onError && onError(res[key].error());
          return;
        }
        const data = res[key].data();
        if (data && Array.isArray(data.tasks) && data.tasks.length > 0) {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${data.tasks.length} –∑–∞–¥–∞—á(–∏) —Å ${key}`);
          data.tasks.forEach((task) => {
            tasks.set(task.id, task);
            batchTasks.push(task);
          });
          hasMore = true;
        }
      }

      // –ï—Å–ª–∏ –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º onBatchLoaded (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
      if (typeof onBatchLoaded === 'function' && batchTasks.length) {
        // –ï—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –≤ –ø–∞–∫–µ—Ç–µ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ CREATED_DATE
        batchTasks.sort((a, b) => new Date(b.CREATED_DATE) - new Date(a.CREATED_DATE));
        onBatchLoaded(batchTasks);
      }

      if (hasMore) {
        fetchBatch(start + maxBatch * batchSize);
      } else {
        console.log(`‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.size} `);
        onComplete(Array.from(tasks.values()), null);
      }
    });
  }

  fetchBatch(startIndex);
}

// –¢–µ—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É.
 * @param {String} startDate - –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.
 * @param {String} endDate - –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.
 * @param {Function} onComplete - –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á.
 * @param {Function} onBatchLoaded - –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –∑–∞–¥–∞—á.
 * @param {Function} onError - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
 * @param {String|Number|null} responsibleId - (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞.
 */
export function loadTasksForRange(
  startDate,
  endDate,
  onComplete,
  onBatchLoaded,
  onError,
  responsibleId = null,
) {
  // –†–µ–∞–ª–∏–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –∏ —Ñ–∏–ª—å—Ç—Ä—É (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
  const cacheKey = `${responsibleId || 'all'}_${startDate}_${endDate}`;
  if (window.taskCache && window.taskCache[cacheKey]) {
    console.log(`‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è ${cacheKey}`);
    onComplete(window.taskCache[cacheKey], null);
    return;
  }

  let tasks = new Map();
  const batchSize = 50;
  let startIndex = 0;

  function fetchBatch(start) {
    let batch = {};
    console.log(`üì° –ó–∞–ø—Ä–æ—Å batch —Å –∑–∞–¥–∞—á–∞–º–∏ —Å ${startDate} –ø–æ ${endDate}, –Ω–∞—á–∏–Ω–∞—è —Å ${start}`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä: –≤—Å–µ–≥–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
    let filter = {
      '<=START_DATE_PLAN': endDate, // –∑–∞–¥–∞—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
      '>=END_DATE_PLAN': startDate, // –∑–∞–¥–∞—á–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    };

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ RESPONSIBLE_ID
    if (responsibleId) {
      filter.RESPONSIBLE_ID = responsibleId;
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º 5 —Å—Ç—Ä–∞–Ω–∏—Ü (batch)
    for (let i = 0; i < 5; i++) {
      let startPosition = start + i * batchSize;
      batch[`page_${i}`] = [
        'tasks.task.list',
        {
          filter: filter,
          order: { CREATED_DATE: 'DESC' },
          SELECT: [
            'ID',
            'TITLE',
            'RESPONSIBLE_ID',
            'START_DATE_PLAN',
            'END_DATE_PLAN',
            'DEADLINE',
            'DESCRIPTION',
            'GROUP_ID',
            'TIME_ESTIMATE',
            'XML_ID', // –¥–ª—è "–í–µ—Å—å –¥–µ–Ω—å"
          ],
          start: startPosition,
        },
      ];
    }

    BX24.callBatch(batch, (res) => {
      let hasMore = false;
      let batchTasks = [];

      for (let key in res) {
        if (res[key].error()) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á (${key}):`, res[key].error());
          onError && onError(res[key].error());
          return;
        }
        const data = res[key].data();
        if (data?.tasks?.length) {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${data.tasks.length} –∑–∞–¥–∞—á(–∏) —Å ${key}`);
          data.tasks.forEach((task) => {
            tasks.set(task.id, task);
            batchTasks.push(task);
          });
          hasMore = true;
        }
      }

      if (typeof onBatchLoaded === 'function' && batchTasks.length) {
        // –ú–æ–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        batchTasks.sort((a, b) => new Date(b.CREATED_DATE) - new Date(a.CREATED_DATE));
        onBatchLoaded(batchTasks);
      }

      if (hasMore) {
        fetchBatch(start + 5 * batchSize);
      } else {
        console.log(`‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.size}`);
        const allTasks = Array.from(tasks.values());
        console.log('–ó–∞–¥–∞—á–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ BX24:', allTasks);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        window.taskCache = window.taskCache || {};
        window.taskCache[cacheKey] = allTasks;
        onComplete(allTasks, null);
      }
    });
  }

  fetchBatch(startIndex);
}
