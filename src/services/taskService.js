// src/services/taskService.js

/**
 * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {Object} taskData - –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function createTask(taskData, callback) {
  BX24.callMethod(
    'tasks.task.add',
    {
      fields: {
        TITLE: taskData.title,
        DESCRIPTION: taskData.comment || null || '',
        RESPONSIBLE_ID: taskData.executor, // ID –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (—Ä–µ–∞–ª—å–Ω—ã–π ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ userService)
        START_DATE_PLAN: taskData.start,
        END_DAT–ï_PLAN: taskData.end,
        DEADLINE: taskData.deadline || null || '',
        XML_ID: taskData.allDay ? 'ALLDAY' : null, // ‚úÖ –¢–æ–ª—å–∫–æ –¥–ª—è "–í–µ—Å—å –¥–µ–Ω—å"
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, —Ç–µ–≥–∏ –∏ —Ç.–¥.)
      },
    },
    (result) => {
      if (result.error()) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
        callback(null, result.error());
      } else {
        callback(result.data());
      }
    },
  );
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {String|Number} taskId - ID –∑–∞–¥–∞—á–∏.
 * @param {Object} taskData - –û–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function updateTask(taskId, taskData, callback) {
  BX24.callMethod(
    'tasks.task.update',
    {
      taskId: taskId,
      fields: {
        TITLE: taskData.title,
        DESCRIPTION: taskData.comment,
        RESPONSIBLE_ID: taskData.executor,
        START_DATE_PLAN: taskData.start,
        END_DATE_PLAN: taskData.end,
        DEADLINE: taskData.deadline,
      },
    },
    (result) => {
      if (result.error()) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
        callback(null, result.error());
      } else {
        callback(result.data());
      }
    },
  );
}

/**
 * –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ Bitrix24.
 * @param {String|Number} taskId - ID –∑–∞–¥–∞—á–∏.
 * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
 */
export function deleteTask(taskId, callback) {
  console.log('üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å ID:', taskId, typeof taskId);
  BX24.callMethod('tasks.task.delete', { taskId }, (result) => {
    if (result.error()) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', result.error());
      callback(false, result.error());
    } else {
      callback(true);
    }
  });
}

export function loadAllTasks(callback) {
  let tasks = new Map();
  let batchSize = 50; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
  let maxBatch = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–Ω–æ–º batch-–∑–∞–ø—Ä–æ—Å–µ
  let startIndex = 0;

  function fetchBatch(start) {
    let batch = {};
    console.log(`üì° –ó–∞–ø—Ä–æ—Å batch —Å ${maxBatch} —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å ${start}`);

    for (let i = 0; i < maxBatch; i++) {
      let startPosition = start + i * batchSize;
      batch[`page_${i}`] = [
        'tasks.task.list',
        {
          FILTER: {}, // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
          SELECT: ['ID', 'TITLE', 'RESPONSIBLE_ID', 'START_DATE_PLAN', 'END_DATE_PLAN', 'DEADLINE'],
          start: startPosition,
        },
      ];
    }

    BX24.callBatch(batch, (res) => {
      let hasMore = false;

      for (let key in res) {
        if (res[key].error()) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á (${key}):`, res[key].error());
          callback(null, res[key].error());
          return;
        }

        const data = res[key].data();
        if (data && Array.isArray(data.tasks) && data.tasks.length > 0) {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${data.tasks.length} –∑–∞–¥–∞—á(–∏) —Å ${key}`);

          data.tasks.forEach((task) => {
            tasks.set(task.id, task);
          });

          // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—à–ª–∏, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –µ—Å—Ç—å –µ—â–µ –∑–∞–¥–∞—á–∏
          hasMore = true;
        }
      }

      if (hasMore) {
        fetchBatch(start + maxBatch * batchSize);
      } else {
        console.log(`‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.size}`);
        callback(Array.from(tasks.values()), null);
      }
    });
  }

  fetchBatch(startIndex);
}

export function loadUnplannedTasks(callback) {
  let tasks = new Map();
  let batchSize = 50;
  let maxBatch = 5;
  let startIndex = 0;

  function fetchBatch(start) {
    let batch = {};
    console.log(`üì° –ó–∞–ø—Ä–æ—Å batch —Å ${maxBatch} —Å—Ç—Ä–∞–Ω–∏—Ü, –Ω–∞—á–∏–Ω–∞—è —Å ${start}`);

    for (let i = 0; i < maxBatch; i++) {
      let startPosition = start + i * batchSize;
      batch[`page_${i}`] = [
        'tasks.task.list',
        {
          FILTER: {
            '!START_DATE_PLAN': null,
            '!END_DATE_PLAN': null,
          },
          SELECT: [
            'ID',
            'TITLE',
            'RESPONSIBLE_ID',
            'START_DATE_PLAN',
            'END_DATE_PLAN',
            'TIME_ESTIMATE',
            'RESPONSIBLE', // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
          ],
          start: startPosition,
        },
      ];
    }

    BX24.callBatch(batch, (res) => {
      let hasMore = false;

      for (let key in res) {
        if (res[key].error()) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á (${key}):`, res[key].error());
          callback(null, res[key].error());
          return;
        }

        const data = res[key].data();
        if (data && Array.isArray(data.tasks) && data.tasks.length > 0) {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω—ã ${data.tasks.length} –∑–∞–¥–∞—á(–∏) —Å ${key}`);

          data.tasks.forEach((task) => {
            if (!task.startDatePlan || !task.endDatePlan || !task.timeEstimate) {
              tasks.set(task.id, {
                id: task.id,
                title: task.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                responsibleId: task.responsible?.id || task.responsibleId,
                responsibleName: task.responsible?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω', // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                startDatePlan: task.startDatePlan || '',
                endDatePlan: task.endDatePlan || '',
                timeEstimate: task.timeEstimate || '',
              });
            }
          });

          hasMore = true;
        }
      }

      if (hasMore) {
        fetchBatch(start + maxBatch * batchSize);
      } else {
        console.log(`‚úÖ –í—Å–µ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í—Å–µ–≥–æ: ${tasks.size}`);
        callback(Array.from(tasks.values()), null);
      }
    });
  }

  fetchBatch(startIndex);
}
